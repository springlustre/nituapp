app{

  http {
    interface = "0.0.0.0"
    port = 30332
  }

  server {
    protocol = "http"
    domain = "wangchunze.top"
    host = "139.129.25.229"
  }

  wx.config {
    appId = "wxe41308423bc2e12c"
    secureKey = "52686945da6a54769db4e779a5f06560"
  }

  mob.config{
    clientId = "YXA62GR3YGIJEeel7O0As4JCXg"
    clientKey = "YXA6Gtx5bjdMdrI362SSdQyehJ0VceM"
  }


}

slick.db {

  url = "jdbc:postgresql://139.129.25.229:5432/nituapp?characterEncoding=utf-8" // dev
  user = "nituapp"
  password = "xxxxxx"
  numThreads = 3 //20
  maximumPoolSize = 5
  connectTimeout = 45000
  idleTimeout = 300000
  maxLifetime = 900000
}



session {

  cookie {
    name = "zhuazhua101"
    domain = none
    path = "/"
    secure = false
    httpOnly = true
    maxAge = 1 days
  }
  encryptData = false
  serverSecret = "0gfmOdf34doivc2dg-aj53Kelk4;ztymc23;r3r3l*m3^20M3;l2f0;[+Gfdyrtyr4sKrtsyhf92"

}




akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  jvm-exit-on-fatal-error = false  //因为程序异常挂掉加的

  ssl-config {
    # due to still supporting JDK6 in TLSv1
    # once JDK 8 is required switch this to TLSv1.2 (or remove entirely, leave up to ssl-config to pick)
    protocol = "TLSv1.2"
  }

  http {

    server {
      remote-address-header = on

      parsing {
        max-content-length = 32m
        max-chunk-ext-length = 256
        max-chunk-size = 2m
      }
    }
  }


  actor {

    my-blocking-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"

      thread-pool-executor {
        # Keep alive time for threads
        keep-alive-time = 60s

        # Define a fixed thread pool size with this property. The corePoolSize
        # and the maximumPoolSize of the ThreadPoolExecutor will be set to this
        # value, if it is defined. Then the other pool-size properties will not
        # be used.
        #
        # Valid values are: `off` or a positive integer.
        fixed-pool-size = off

        # Min number of threads to cap factor-based corePoolSize number to
        core-pool-size-min = 16

        # The core-pool-size-factor is used to determine corePoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor).
        # Resulting size is then bounded by the core-pool-size-min and
        # core-pool-size-max values.
        core-pool-size-factor = 100.0

        # Max number of threads to cap factor-based corePoolSize number to
        core-pool-size-max = 256

        # Minimum number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-min = 16

        # The max-pool-size-factor is used to determine maximumPoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor)
        # The maximumPoolSize will not be less than corePoolSize.
        # It is only used if using a bounded task queue.
        max-pool-size-factor  = 100.0

        # Max number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-max = 256

        # Specifies the bounded capacity of the task queue (< 1 == unbounded)
        task-queue-size = -1

        # Specifies which type of task queue will be used, can be "array" or
        # "linked" (default)
        task-queue-type = "linked"

        # Allow core threads to time out
        allow-core-timeout = on
      }

      throughput = 100
    }
  }


  serializers {
    proto = "akka.remote.serialization.ProtobufSerializer"
  }

  serialization-bindings {
    "com.neo.sk.akso.utils.ActorProtocol" = proto
  }

}